var potterQuest = (function() {
  var backgrounds = {
    initBackground: "<%= asset_path('game_title.png')%>",
    fullBackground: "<%= asset_path('background-sprite.png')%>"
  }

  var avatars = {
    harry: "<%= asset_path('harry_potter_sprite.png')%>"
  }

  /* Game Constructor and Methods */
  function Game() {
    this.elem = $('.game-container')[0];
    this.bounds = null;
    this.initialBackgroundScale = '890% 895%';
    this.initialPos = {
      x: -67,
      y: -3790
    }
    this.sceneShift = {
      x: 757,
      y: 590
    };
    this.edges = {
      right: this.initialPos.x - this.sceneShift.x * 2,
      top: this.initialPos.y + this.sceneShift.y * 2
    }
    this.scenePos = {
      x: this.initialPos.x,
      y: this.initialPos.y
    };
    this.gameSpeed = 75;
    this.state = 'init';
    this.score = 0;
    this.time = 0;
    this.characters = [];
    this.obstacles = [];
    this.typing = {
      show: false,
      phrase: ''
    };
    this.responding = {
      show: false,
      phrase: ''
    };
    this.inventory = {
      show: false,
      contents: ''
    }
    this.pause = false;
    this.startTime = new Date();
  }

  Game.prototype.init = function() {
    $(this.elem).css({
      'background-image': 'url(' + backgrounds.initBackground + ')',
      'background-size': '100% 100%'
    });
    this.initEventHandlers(this);
    this.loopHandle = setInterval(function() {
      if (!game.pause) {
        game.run();
      }
    }, this.gameSpeed);
  }

  Game.prototype.initEventHandlers = function(self) {
    // Start/Play Game button
    $('.game-container').on('click', '.startBtn', function() {
      if (self.state === 'init') {
        $('.game-container').find('.startBtn').hide();
        $('.menu').show();
        self.state = 'swingBridge';
        self.responding.show = true;
        self.responding.phrase = "You, Harry Potter, are tasked with finding all of Lord Voldemort's horcruxes. It's a dangerous task, but you must protect the wizarding world from You-Know-Who's return.";
        $('.dialog').text(self.responding.phrase).show();
        self.addCharacter('Harry Potter', avatars.harry);
        $(self.elem).css({
          'background-image': 'url(' + backgrounds.fullBackground + ')',
          'background-size': self.initialBackgroundScale,
          'background-position': self.scenePos.x + 'px ' + self.scenePos.y + 'px'
        });
        self.pause = true;
      }
    });
    // If user clicks Inventory, show the inventory.
    $('.game-container').on('click','.invOption', function() {
      self.pause = true;
      self.inventory.show = true;
      $('.inventory').html("INVENTORY<br><br>" + self.inventory.contents).show();
    });
    // Handle key presses
    $('body').keyup(function(event) {
      self.handleKeyUp(event.which);
    });
    $('body').keypress(function(event) {
      self.handleKeyPress(event.which);
    });
  }

  Game.prototype.run = function() {
    if (this.state !== 'init') {
      this.updateGame();
    }
  }

  Game.prototype.checkState = function() {
    var backX = this.scenePos.x;
    var backY = this.scenePos.y;
    var initX = this.initialPos.x;
    var initY = this.initialPos.y;
    if ( backX === initX && backY === initY ) {
      this.state = 'swingBridge';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY ) {
      this.state = 'stump';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY ) {
      this.state = 'field';
    } else if ( backX === initX && backY === initY + this.sceneShift.y * 1 ) {
      this.state = 'oldMan';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY + this.sceneShift.y * 1 ) {
      this.state = 'horizBridge';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY + this.sceneShift.y * 1) {
      this.state = 'flowers';
    } else if ( backX === initX && backY === initY + this.sceneShift.y * 2) {
      this.state = 'verticalBridge';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY + this.sceneShift.y * 2) {
      this.state = 'stoneBridge';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY + this.sceneShift.y * 2 ) {
      this.state = 'lake';
    }
  }

  Game.prototype.checkTyping = function(phrase) {
    var scene = this.state;
    phrase = phrase.toLowerCase();
    switch (scene) {
      case 'init':
        // Do nothing
        break;
      case 'swingBridge':
        // Looking around
        if (phrase.includes('look')) {
          this.responding.phrase = "You are standing near a bridge, and you see a tall tree in the distance. There is a tall mountain range blocking your path to the west and south. You hope there is a horcrux to destroy somewhere...but even if you find it, how will you destroy it?";
          if (phrase.includes('tree')) {
            this.responding.phrase = "The tree is a normal tree.";
          }
          if (phrase.includes('grass')) {
            this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
          }
          if (phrase.includes('bridge')) {
            this.responding.phrase = "The wooden bridge looks old, but safe.";
          }
          if (phrase.includes('river') || phrase.includes('water')) {
            this.responding.phrase = "The river below is flowing calmly.";
          }
        }
        else if (phrase.includes('take')) {
          this.responding.phrase = "You don't need it.";
          if (phrase.includes('grass')) {
            this.responding.phrase = "Why would you carry the grass with you...?";
          }
          if (phrase.includes('river') || phrase.includes('water')) {
            this.responding.phrase = "You can't reach the river, and you couldn't carry it anyway.";
          }
          if (phrase.includes('rock')){
            this.responding.phrase = "You reach down and pick up a smooth rock, hoping that somehow this one little pebble will help you destroy Lord Voldemort. Between you and me, it probably won't.";
            this.inventory.contents += " Rock";
            this.score += 5;
          }
        }
        else {
          this.responding.phrase = "I don't understand that.";
        }
        break;
      default:
        this.responding.phrase = "You are standing in scene: " + this.state;
    }

    $('.dialog').text(this.responding.phrase).show();
    this.responding.show = true;
    this.pause = true;
  }

  Game.prototype.handleKeyPress = function(key) {
    switch (this.state) {
      case 'init':
        if (key === 13) {
          $('.startBtn').trigger('click');
        }
        break;
      default:
        if (key >= 48 && key <= 220 && !this.responding.show) {
          this.pause = true;
          // this.responding.show = false;
          // $('.dialog').text("Testing").hide();
          this.typing.show = true;
          var char = String.fromCharCode(key);
          this.typing.phrase += char;
          $('.typing').text(this.typing.phrase).show();
        } else if (key === 13) {
          // Enter
          if (this.typing.show) {
            this.typing.show = false;
            $('.typing').hide();
            var userPhrase = this.typing.phrase;
            this.typing.phrase = '';
            this.checkTyping(userPhrase);
          } else if (this.responding.show) {
            this.responding.show = false;
            $('.dialog').text("Testing").hide();
          } else if (this.inventory.show) {
            $('.inventory').hide();
            this.inventory.show = false;
          } else if ($('.invOption.active').length === 1) {
            $('.option.active').removeClass('active');
            this.inventory.show = true;
            $('.inventory').html("INVENTORY<br><br>" + this.inventory.contents).show();
          }
          if (!this.responding.show && !this.inventory.show) {
            this.pause = false;
          }
        } else if (key === 32) {
          // Space
          if (this.typing.phrase.length > 1) {
            this.typing.phrase += ' ';
            $('.typing').text(this.typing.phrase).show();
          }
        }
    }
  }

  Game.prototype.handleKeyUp = function(key) {
    switch (this.state) {
      case 'init':
        // Do nothing.
        break;
      default:
        var action = this.characters[0].action;
        switch (key) {
          case 8:
            // Backspace
            if (this.typing.phrase.length > 1) {
              this.typing.phrase = this.typing.phrase.substring(0, this.typing.phrase.length - 1);
              $('.typing').text(this.typing.phrase).show();
            } else {
              this.typing.phrase = '';
              $('.typing').hide();
            }
            break;
          case 27:
            // Escape
            if ( $('.option.active').length === 0 ) {
              $('.fileOption').addClass('active');
              $('.save').addClass('active');
              this.pause = true;
            } else {
              $('.option.active').removeClass('active');
              $('.save').removeClass('active');
              this.pause = false;
            }
            break;
          case 37:
            if (this.pause && $('.fileOption.active').length === 0) {
              $('.option.active').toggleClass('active').prev('.option').toggleClass('active');
            }
            action = (action === 'walk-left') ? 'stop' : 'walk-left';
            break;
          case 38:
            if (this.pause && $('.fileOption.active').length === 1 && $('.save.active').length === 0) {
              $('.fileOptions li.active').toggleClass('active').prev('li').toggleClass('active');
            }
            action = (action === 'walk-up') ? 'stop' : 'walk-up';
            break;
          case 39:
            if (this.pause && $('.timeOption.active').length === 0) {
              $('.option.active').toggleClass('active').next('.option').toggleClass('active');
            }
            action = (action === 'walk-right') ? 'stop' : 'walk-right';
            break;
          case 40:
            if (this.pause && $('.fileOption.active').length === 1 && $('.restore.active').length === 0) {
              $('.fileOptions li.active').toggleClass('active').next('li').toggleClass('active');
            }
            action = (action === 'walk-down') ? 'stop' : 'walk-down';
            break;
          case 191:
            // Forward slash
            if (!this.typing.show && !this.responding.show) {
              this.pause = true;
              this.inventory.show = true;
              $('.inventory').html("INVENTORY<br><br>" + this.inventory.contents).show();
              break;
            }
        }
        if (this.pause) {
          action = 'stop';
        }
        this.characters[0].action = action;
    }
  }

  Game.prototype.updateGame = function() {
    var currentScore = $('.score').text();
    if (this.score !== currentScore) {
      $('.score').text(this.score);
    }
    // var timeDisplay = moment(0-25200000).format('hh:mm:ss');
    // $('.timeOption').text(timeDisplay);
    if (this.state !== 'init') {
      this.bounds = this.elem.getBoundingClientRect();
    }
    var allCharacters = this.characters;
    for (var index = 0; index < allCharacters.length; index++) {
      var character = allCharacters[index];
      character.updateCharacter();
      character.scene = this.state;
      this.checkCollisions();
    }
  }

  Game.prototype.checkCollisions = function() {
    this.checkBorders();
    this.checkObstacles();
  }

  Game.prototype.checkBorders = function() {
    var character = this.characters[0];
    var gameBounds = this.bounds;
    var charBounds = character.bounds;
    var action = character.action;

    if (action === 'walk-left' && charBounds.left < gameBounds.left) {
      character.x = 700;
      this.scenePos.x = this.scenePos.x + this.sceneShift.x;
    } else if (action === 'walk-right' && charBounds.right > gameBounds.right) {
      character.x = 0;
      this.scenePos.x = this.scenePos.x - this.sceneShift.x;
    } else if (action === 'walk-up' && charBounds.top < gameBounds.top) {
      character.y = 500;
      this.scenePos.y = this.scenePos.y + this.sceneShift.y;
    } else if (action === 'walk-down' && charBounds.bottom > gameBounds.bottom) {
      character.y = 0;
      this.scenePos.y = this.scenePos.y - this.sceneShift.y;
    }
    if (this.scenePos.x > this.initialPos.x) {
      this.scenePos.x = this.edges.right;
    } else if (this.scenePos.x < this.edges.right) {
      this.scenePos.x = this.initialPos.x;
    } else if (this.scenePos.y > this.edges.top) {
      this.scenePos.y = this.initialPos.y;
    } else if (this.scenePos.y < this.initialPos.y) {
      this.scenePos.y = this.edges.top;
    }
    $(this.elem).css({
      'background-position': this.scenePos.x + 'px ' + this.scenePos.y + 'px'
    });
    this.checkState();
  }

  Game.prototype.checkObstacles = function() {
    // Nothing here yet.
  }

  Game.prototype.addCharacter = function(name, avatar) {
    /* Create main character */
    var newCharacter = new Character(name, avatar, 350, 300);
    newCharacter.create(this);
    this.characters.push(newCharacter);
  }

  /* Character Constructor and Methods */
  function Character(name, avatar, x, y) {
    this.elem = null;
    this.bounds = null;
    this.name = name;
    this.image = avatar;
    this.x = x;
    this.y = y;
    this.backX = 0;
    this.backY = 0;
    this.speed = 20;
    this.action = 'stand';
    this.scene = 'init';
  }

  Character.prototype.create = function() {
    $('<div>').attr({
      'class': 'character',
      'name': this.name
    }).css({
      'position': 'absolute',
      'left': this.x,
      'top': this.y,
      'height': '120px',
      'width': '60px',
      'background-image': 'url(' + this.image + ')',
      'background-size': '400% 400%',
    }).appendTo($('.game-container'));
    var htmlElem = $('.character').last()[0];
    this.elem = htmlElem;
  }

  Character.prototype.updateCharacter = function() {
    var action = this.action;
    switch (action) {
      case 'stand':
        this.move.stop(this);
        break;
      case 'walk-left':
        this.move.left(this);
        break;
      case 'walk-right':
        this.move.right(this);
        break;
      case 'walk-up':
        this.move.up(this);
        break;
      case 'walk-down':
        this.move.down(this);
        break;
    }
    this.draw(action);
    this.bounds = this.elem.getBoundingClientRect();
  }

  Character.prototype.move = {
    stop: function(self) {
      // Do nothing for now
    },
    left: function(self) {
      self.x -= self.speed;
    },
    right: function(self) {
      self.x += self.speed;
    },
    up: function(self) {
      self.y -= self.speed;
    },
    down: function(self) {
      self.y += self.speed;
    }
  }

  Character.prototype.canMoveUp = function(scene) {
    var canMove = true;
    if (scene === 'oldMan') {
      canMove = false;
    }
    return canMove;
  }

  Character.prototype.draw = function(action) {
    var $self = $(this.elem);
    $self.css({
      'left': this.x,
      'top': this.y
    });
    switch (action) {
      case 'walk-left':
        this.backX += 60;
        this.backY = 360;
        break;
      case 'walk-right':
        this.backX += 60;
        this.backY = 240;
        break;
      case 'walk-up':
        this.backX += 60;
        this.backY = 120;
        break;
      case 'walk-down':
        this.backX += 60;
        this.backY = 0;
        break;
    }
    $self.css({
      'background-position': this.backX + 'px ' + this.backY + 'px'
    });
  }

  /* Create new game */
  var game;
  game = new Game();
  game.init();


  return {
    game: game
  }

})();
