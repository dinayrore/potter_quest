var potterQuest = (function() {
  var backgrounds = {
    initBackground: "<%= asset_path('game_title.png')%>",
    fullBackground: "<%= asset_path('background-sprite.png')%>"
  }

  var avatars = {
    harry: "<%= asset_path('harry_potter_sprite.png')%>"
  }

  /* Game Constructor and Methods */
  function Game() {
    this.elem = $('.game-container')[0];
    this.bounds = null;
    this.initialBackgroundScale = '890% 895%';
    this.initialPos = {
      x: -67,
      y: -3790
    }
    this.sceneShift = {
      x: 757,
      y: 590
    };
    this.edges = {
      right: this.initialPos.x - this.sceneShift.x * 2,
      top: this.initialPos.y + this.sceneShift.y * 2
    }
    this.scenePos = {
      x: this.initialPos.x,
      y: this.initialPos.y
    };
    this.gameSpeed = 75;
    this.state = 'init';
    this.score = 0;
    this.time = 0;
    this.characters = [];
    this.obstacles = [];
    this.typing = {
      show: false,
      phrase: ''
    };
    this.responding = {
      show: false,
      phrase: ''
    };
    this.inventory = {
      show: false,
      contents: ''
    }
    this.pause = false;
    this.startTime = new Date();
    this.restored = false;

    // Check for restored info
    if (parseInt($('.savedTime').text()) > 0 ) {
      console.log(parseInt($('.savedTime').text()), this.scene);
      this.scene = $('.savedScene').text();
      this.inventory.contents = $('.savedInv').text();
      this.score = parseInt($('.savedScore').text());
      this.time = parseInt($('.savedTime').text());
      this.restored = true;
    }
  }

  Game.prototype.init = function() {
    $(this.elem).css({
      'background-image': 'url(' + backgrounds.initBackground + ')',
      'background-size': '100% 100%'
    });
    this.initEventHandlers(this);
    this.loopHandle = setInterval(function() {
      if (!game.pause) {
        game.run();
      }
    }, this.gameSpeed);
  }

  Game.prototype.initEventHandlers = function(self) {
    // Start/Play Game button
    $('.game-container').on('click', '.startBtn', function() {
      if (self.state === 'init') {
        $('.game-container').find('.startBtn').hide();
        $('.menu').show();
        self.state = 'swingBridge';
        self.responding.show = true;
        if (!self.restored) {
          self.responding.phrase = "You, Harry Potter, are tasked with finding all of Lord Voldemort's horcruxes. It's a dangerous task, but you must protect the wizarding world from You-Know-Who's return.";
        } else {
          self.responding.phrase = "Welcome back!";
        }
        $('.dialog').text(self.responding.phrase).show();
        self.addCharacter('Harry Potter', avatars.harry);
        $(self.elem).css({
          'background-image': 'url(' + backgrounds.fullBackground + ')',
          'background-size': self.initialBackgroundScale,
          'background-position': self.scenePos.x + 'px ' + self.scenePos.y + 'px'
        });
        self.pause = true;
      }
    });

    // If user clicks save button in menu, save the game.
    $('.game-container').on('click', '.invOption', function() {
      $('.saveBtn').trigger('click');
    });

    // If user clicks Inventory, show the inventory.
    $('.game-container').on('click','.invOption', function() {
      self.pause = true;
      self.inventory.show = true;
      $('.inventory').html("INVENTORY<br><br>" + self.inventory.contents).show();
    });
    // Handle key presses
    $('body').keyup(function(event) {
      self.handleKeyUp(event.which);
    });
    $('body').keypress(function(event) {
      self.handleKeyPress(event.which);
    });
  }

  Game.prototype.run = function() {
    if (this.state !== 'init') {
      this.updateGame();
    }
  }

  Game.prototype.checkState = function() {
    var backX = this.scenePos.x;
    var backY = this.scenePos.y;
    var initX = this.initialPos.x;
    var initY = this.initialPos.y;
    if ( backX === initX && backY === initY ) {
      this.state = 'swingBridge';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY ) {
      this.state = 'stump';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY ) {
      this.state = 'field';
    } else if ( backX === initX && backY === initY + this.sceneShift.y * 1 ) {
      this.state = 'oldMan';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY + this.sceneShift.y * 1 ) {
      this.state = 'horizBridge';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY + this.sceneShift.y * 1) {
      this.state = 'flowers';
    } else if ( backX === initX && backY === initY + this.sceneShift.y * 2) {
      this.state = 'verticalBridge';
    } else if ( backX === initX - this.sceneShift.x * 1 && backY === initY + this.sceneShift.y * 2) {
      this.state = 'stoneBridge';
    } else if ( backX === initX - this.sceneShift.x * 2 && backY === initY + this.sceneShift.y * 2 ) {
      this.state = 'lake';
    }
  }

  Game.prototype.checkTyping = function(phrase) {
    var scene = this.state;
    phrase = phrase.toLowerCase();
    var pockets = this.inventory.contents.toLowerCase();
    switch (scene) {
      case 'init':
        // Do nothing
        break;
      case 'swingBridge':
            if (phrase.includes('look')) {
                  this.responding.phrase = "You are standing near a bridge, and you see a tall tree in the distance. There is a tall mountain range blocking your path to the west and south. You hope there is a horcrux to destroy somewhere...but even if you find it, how will you destroy it?";
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "The tree is a normal tree.";
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "The flower you picked is very lovely, and it even still has its roots. Perfect if you wanted to start your own garden."
                    } else {
                      this.responding.phrase = "There aren't any flowers here.";
                    }
                  }
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
                  }
                  if (phrase.includes('bridge')) {
                    this.responding.phrase = "The wooden bridge looks old, but safe.";
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('ravine') || phrase.includes('gorge') || phrase.includes('cliff')) {
                    this.responding.phrase = "The river below is flowing calmly.";
                  }
                  if (phrase.includes('sky')) {
                    this.responding.phrase = "No dark marks in the sky. That's always good.";
                  }
                  if (phrase.includes('ground')) {
                    this.responding.phrase = "The ground is mostly covered with grass, but there are some rocks, too.";
                  }
                  if (phrase.includes('bush')) {
                    this.responding.phrase = "You look around in the bush...but alas, no horcruxes.";
                  }
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "The rock you are carrying is a regular smooth rock. Perfect for defeating evil."
                    } else {
                      this.responding.phrase = "There are some smooth rocks on the ground here.";
                    }
                  }
            }
            else if (phrase.includes('take')) {
                  this.responding.phrase = "You don't need it.";
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "Why would you carry the grass with you...?";
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "There's no way you can carry a whole tree, at least not without Hermione's bag."
                  }
                  if (phrase.includes('river') || phrase.includes('water')) {
                    this.responding.phrase = "You can't reach the river, and you couldn't carry it anyway.";
                  }
                  if (phrase.includes('rock')){
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "You already have a rock. No need to carry around a whole bucket of them.";
                    } else {
                      this.responding.phrase = "You reach down and pick up a smooth rock, hoping that somehow this one little pebble will help you destroy Lord Voldemort. Between you and me, it probably won't.";
                      this.inventory.contents += "Rock<br>";
                      this.score += 5;
                    }
                  }
            }
            else if (phrase.includes('wingardium leviosa') || phrase.includes('expelliarmus') || phrase.includes('lumos') || phrase.includes('nox') || phrase.includes('stupefy') || phrase.includes('confundo')) {
                  this.responding.phrase = "Practicing magic is great, but you've got a horcrux to find.";
            }
            else {
                  this.responding.phrase = "I don't understand that.";
            }
            break;
      case 'stump':
            if (phrase.includes('look')) {
                  this.responding.phrase = "The river turns north here, and as you look around you just see more grass, rocks, trees, and an old stump.";
                  if (phrase.includes('sword')) {
                    if (pockets.includes('sword')) {
                      this.responding.phrase = "The sword is hefty, but not too heavy. You remember when you used it to kill the basilisk, and how generally unpleasant that was.";
                    } else {
                      this.responding.phrase = "What sword?";
                    }
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "The flower you picked is very lovely, and it even still has its roots. Perfect if you wanted to start your own garden."
                    } else {
                      this.responding.phrase = "There aren't any flowers here.";
                    }
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "The trees are all normal trees here.";
                  }
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('ravine') || phrase.includes('gorge') || phrase.includes('cliff')) {
                    this.responding.phrase = "The river below is flowing calmly.";
                  }
                  if (phrase.includes('sky')) {
                    this.responding.phrase = "No dark marks in the sky. That's always good.";
                  }
                  if (phrase.includes('ground')) {
                    this.responding.phrase = "The ground is mostly covered with grass, but there are some rocks, too.";
                  }
                  if (phrase.includes('bush')) {
                    this.responding.phrase = "You look around in the bush...but alas, no horcruxes.";
                  }
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "The rock you are carrying is a regular smooth rock. Perfect for defeating evil.";
                    } else {
                      this.responding.phrase = "There are some smooth rocks on the ground here.";
                    }
                  }
                  if (phrase.includes('stump')) {
                    this.responding.phrase = "The old stump has a hole in it.";
                  }
                  if (phrase.includes('hole')) {
                    if (pockets.includes('sword')) {
                      this.responding.phrase = "There's nothing else in the hole.";
                    } else {
                      this.responding.phrase = "You think there is something shiny way back there.";
                    }
                  }
            }
            else if (phrase.includes('take')) {
                  this.responding.phrase = "You don't need it.";
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "Why would you carry the grass with you...?";
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "There's no way you can carry a whole tree, at least not without Hermione's bag.";
                  }
                  if (phrase.includes('river') || phrase.includes('water')) {
                    this.responding.phrase = "You can't reach the river, and you couldn't carry it anyway.";
                  }
                  if (phrase.includes('stump')) {
                    this.responding.phrase = "What would you want with an old stump?";
                  }
                  if (phrase.includes('rock')){
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "You already have a rock. No need to carry around a whole bucket of them.";
                    } else {
                      this.responding.phrase = "You reach down and pick up a smooth rock, hoping that somehow this one little pebble will help you destroy Lord Voldemort. Between you and me, it probably won't.";
                      this.inventory.contents += "Rock<br>";
                      this.score += 5;
                    }
                  }
            }
            else if (phrase.includes('reach') || phrase.includes('examine') || phrase.includes('stretch') || phrase.includes('search')) {
                  this.responding.show = "What are you trying to look in, exactly?";
                  if (phrase.includes('hole') || phrase.includes('stump')) {
                    if (pockets.includes('sword')) {
                      this.responding.phrase = "There's nothing else in the hole.";
                    } else {
                      this.responding.phrase = 'You reach way down into the hole to find...the Sword of Gryffindor! Professor Dumbledore always said help would come to those who asked for it. Or deserved it. Or something.';
                      this.inventory.contents += "Sword of Gryffindor<br>";
                      this.score += 5;
                    }
                  }
            }
            else if (phrase.includes('wingardium leviosa') || phrase.includes('expelliarmus') || phrase.includes('lumos') || phrase.includes('nox') || phrase.includes('stupefy') || phrase.includes('confundo')) {
                  this.responding.phrase = "Practicing magic is great, but you've got a horcrux to find.";
            }
            else {
                  this.responding.phrase = "I don't understand that.";
            }
            break;
      case 'field':
            this.responding.phrase = "There is literally nothing to do here. You might as well move along. Come back once we've added more to the game!";
            break;
      case 'oldMan':
            if (phrase.includes('look')) {
                  this.responding.phrase = "This seems to be the home, if you can call it that, of an old man. You assume he's a muggle, by the fact that he is struggling quite a bit with his gardening.";
                  if (phrase.includes('sword')) {
                    if (pockets.includes('sword')) {
                      this.responding.phrase = "The sword is hefty, but not too heavy. You remember when you used it to kill the basilisk, and how generally unpleasant that was.";
                    } else {
                      this.responding.phrase = "What sword?";
                    }
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "The flower you picked is very lovely, and it even still has its roots. Perfect if you wanted to start your own garden."
                    } else {
                      this.responding.phrase = "There aren't any flowers here.";
                    }
                  }
                  if (phrase.includes('man')) {
                    this.responding.phrase = "The man looks quite old, indeed. It looks like he has lived here a long time. Maybe his knowledge of the area could help you find this horcrux...";
                  }
                  if (phrase.includes('hay')) {
                    this.responding.phrase = "There's no needle, if that's what you're looking for.";
                  }
                  if (phrase.includes('house') || phrase.includes('home') || phrase.includes('hut') || phrase.includes('shack')) {
                    this.responding.phrase = "The house is barely a house. It's more like a haystack on sticks.";
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "The tree is a normal tree.";
                  }
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('ravine') || phrase.includes('gorge') || phrase.includes('cliff')) {
                    this.responding.phrase = "The river below is flowing calmly.";
                  }
                  if (phrase.includes('sky')) {
                    this.responding.phrase = "No dark marks in the sky. That's always good.";
                  }
                  if (phrase.includes('ground') || phrase.includes('garden') || phrase.includes('flower')) {
                    this.responding.phrase = "The man looks like he's trying to plant some flowers, but the ground seems to be completely dead. He might not be a very good gardener.";
                  }
                  if (phrase.includes('bush')) {
                    this.responding.phrase = "You look around in the bush...but alas, no horcruxes.";
                  }
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "The rock you are carrying is a regular smooth rock. Perfect for defeating evil."
                    } else {
                      this.responding.phrase = "There are some boulders around here, but nothing very interesting.";
                    }
                  }
            }
            else if (phrase.includes('give')) {
                  this.responding.phrase = "You can't do that.";
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "Who do you want to give the flower to?";
                      if (phrase.includes('man')) {
                        this.inventory.contents = this.inventory.contents.slice(0, pockets.indexOf('flower')) + this.inventory.contents.slice((pockets.indexOf('flower') + 10));
                        this.responding.phrase = '"Why, thank you, young man! This is exactly what I need to help get my garden started!"';
                        this.score += 5;
                        this.gaveFlowerToMan = true;
                      }
                    } else {
                      this.responding.phrase = "You don't have a flower.";
                    }
                  }
            }
            else if (phrase.includes('take')) {
                  this.responding.phrase = "You don't need it."
            }
            else if (phrase.includes('talk')) {
                  this.responding.phrase = "Not a very exciting conversation.";
                  if (phrase.includes('man') && this.gaveFlowerToMan) {
                    this.responding.phrase = '"I always get an eerie feeling when I\'m skipping rocks in the lake beyond the stone bridge. Strange place, that."';
                  } else if (phrase.includes('man')) {
                    this.responding.phrase = '"Young whippersnapper! Leave me alone! I\'ve got to work on my garden!"';
                  }
            }
            else if (phrase.includes('wingardium leviosa') || phrase.includes('expelliarmus') || phrase.includes('lumos') || phrase.includes('nox') || phrase.includes('stupefy') || phrase.includes('confundo')) {
                  this.responding.phrase = "Practicing magic is great, but you've got a horcrux to find.";
            }
            else {
                  this.responding.phrase = "I don't understand that.";
            }
            break;
      case 'horizBridge':
            this.responding.phrase = "Yeah, there's nothing here, either. Again - come back when we've added more to the game!";
            break;
      case 'verticalBridge':
            this.responding.phrase = "Yeah, there's nothing here, either. Again - come back when we've added more to the game!";
            break;
      case 'stoneBridge':
            this.responding.phrase = "Yeah, there's nothing here, either. Again - come back when we've added more to the game!";
            break;
      case 'flowers':
            if (phrase.includes('look')) {
                  this.responding.phrase = "You're standing in a clearing, and there are some wildflowers growing here.";
                  if (phrase.includes('sword')) {
                    if (pockets.includes('sword')) {
                      this.responding.phrase = "The sword is hefty, but not too heavy. You remember when you used it to kill the basilisk, and how generally unpleasant that was.";
                    } else {
                      this.responding.phrase = "What sword?";
                    }
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "The trees are all normal trees here.";
                  }
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('ravine') || phrase.includes('gorge') || phrase.includes('cliff')) {
                    this.responding.phrase = "You can't see the river from here.";
                  }
                  if (phrase.includes('sky')) {
                    this.responding.phrase = "No dark marks in the sky. That's always good.";
                  }
                  if (phrase.includes('ground')) {
                    this.responding.phrase = "There are some flowers growing here.";
                  }
                  if (phrase.includes('bush')) {
                    this.responding.phrase = "There's no bush here.";
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "The flower you picked is very lovely, and it even still has its roots. Perfect if you wanted to start your own garden."
                    } else {
                      this.responding.phrase = "The flowers look very nice.";
                    }
                  }
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "The rock you are carrying is a regular smooth rock. Perfect for defeating evil.";
                    } else {
                      this.responding.phrase = "There are some larger rocks here, but none that are very interesting.";
                    }
                  }
            }
            else if (phrase.includes('take') || phrase.includes('pick')) {
                  this.responding.phrase = "You don't need it.";
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "Why would you carry the grass with you...?";
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "There's no way you can carry a whole tree, at least not without Hermione's bag.";
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "You like the flower you have.";
                    } else {
                      this.responding.phrase = "You pick one of the best looking flowers and decide to carry it with you on your journey. Maybe it will cheer you up along the way.";
                      this.score += 5;
                      this.inventory.contents += "Flower<br>"
                    }
                  }
            }
            else if (phrase.includes('smell')) {
                  this.responding.phrase = "You don't smell anything.";
                  if (phrase.includes('flower')) {
                    this.responding.phrase = "The flowers smell very nice.";
                  }
            }
            else if (phrase.includes('wingardium leviosa') || phrase.includes('expelliarmus') || phrase.includes('lumos') || phrase.includes('nox') || phrase.includes('stupefy') || phrase.includes('confundo')) {
                  this.responding.phrase = "Practicing magic is great, but you've got a horcrux to find.";
            }
            else {
                  this.responding.phrase = "I don't understand that.";
            }
            break;
      case 'lake':
            if (phrase.includes('look')) {
                  this.responding.phrase = "You are standing next to a large lake.";
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "The tree is a normal tree.";
                  }
                  if (phrase.includes('flower')) {
                    if (pockets.includes('flower')) {
                      this.responding.phrase = "The flower you picked is very lovely, and it even still has its roots. Perfect if you wanted to start your own garden."
                    } else {
                      this.responding.phrase = "There aren't any flowers here.";
                    }
                  }
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "The grass is green, but it seems like the whole world is darker while You-Know-Who still lives.";
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('lake') || phrase.includes('pond')) {
                    this.responding.phrase = "The lake looks very calm, but you have a strange feeling that you don't want to go swimming in it.";
                  }
                  if (phrase.includes('sky')) {
                    this.responding.phrase = "No dark marks in the sky. That's always good.";
                  }
                  if (phrase.includes('ground')) {
                    this.responding.phrase = "The ground is mostly covered with grass, but there are some rocks, too.";
                  }
                  if (phrase.includes('bush')) {
                    this.responding.phrase = "You look around in the bush...but alas, no horcruxes.";
                  }
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "The rock you are carrying is a regular smooth rock. Perfect for defeating evil."
                    } else {
                      this.responding.phrase = "There are some larger rocks here, but none that are very interesting.";
                    }
                  }
            }
            else if (phrase.includes('take')) {
                  this.responding.phrase = "You don't need it.";
                  if (phrase.includes('grass')) {
                    this.responding.phrase = "Why would you carry the grass with you...?";
                  }
                  if (phrase.includes('tree')) {
                    this.responding.phrase = "There's no way you can carry a whole tree, at least not without Hermione's bag."
                  }
                  if (phrase.includes('river') || phrase.includes('water') || phrase.includes('lake')) {
                    this.responding.phrase = "You can't carry the water with you.";
                  }
                  if (phrase.includes('rock')){
                    this.responding.phrase = "You don't want any of these rocks.";
                  }
            }
            else if (phrase.includes('throw')) {
                  this.responding.phrase = "You can't throw that.";
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "You give the rock a good solid throw and it plunks into the water with a loud splash. You weren't always very good at skipping rocks.";
                      this.score -= 5;
                      this.inventory.contents = this.inventory.contents.slice(0, pockets.indexOf('rock')) + this.inventory.contents.slice((pockets.indexOf('rock') + 8));
                    } else {
                      this.responding.phrase = "You don't have a rock to throw.";
                    }
                  }
            }
            else if (phrase.includes('skip')) {
                  this.responding.phrase = "You can't do that.";
                  if (phrase.includes('rock')) {
                    if (pockets.includes('rock')) {
                      this.responding.phrase = "You skip the rock very skillfully, and suddenly you notice a golden locket lying on the shore next to the lake! You pick it up and immediately feel a weight of evil. You found a horcrux!";
                      this.score += 5;
                      this.inventory.contents = this.inventory.contents.slice(0, pockets.indexOf('rock')) + this.inventory.contents.slice((pockets.indexOf('rock') + 8));
                      this.inventory.contents += "Locket<br>"
                    } else {
                      this.responding.phrase = "You don't have a rock to skip.";
                    }
                  }
            }
            else if (phrase.includes('wingardium leviosa') || phrase.includes('expelliarmus') || phrase.includes('lumos') || phrase.includes('nox') || phrase.includes('stupefy') || phrase.includes('confundo')) {
                  this.responding.phrase = "Practicing magic is great, but you've got a horcrux to find.";
            }
            else {
                  this.responding.phrase = "I don't understand that.";
            }
            break;
      default:
        this.responding.phrase = "You are standing in scene: " + this.state;
    }
    if (phrase.includes('destroy') && (phrase.includes('locket') || phrase.includes('horcrux'))) {
      if (pockets.includes('locket')) {
        this.responding.phrase = "How would you like to destroy the horcrux?";
      } else {
        this.responding.phrase = "You don't have a horcrux";
      }
    }

    $('.dialog').text(this.responding.phrase).show();
    this.responding.show = true;
    this.pause = true;
  }

  Game.prototype.handleKeyPress = function(key) {
    switch (this.state) {
      case 'init':
        if (key === 13) {
          $('.startBtn').trigger('click');
        }
        break;
      default:
        if (key >= 48 && key <= 220 && !this.responding.show && $('.active').length === 0) {
          this.pause = true;
          this.typing.show = true;
          var char = String.fromCharCode(key);
          this.typing.phrase += char;
          $('.typing').text(this.typing.phrase).show();
        }
        else if (key === 13) {
          // Enter
          if (this.typing.show) {
            this.typing.show = false;
            $('.typing').hide();
            var userPhrase = this.typing.phrase;
            this.typing.phrase = '';
            this.checkTyping(userPhrase);
          } else if (this.responding.show) {
            this.responding.show = false;
            $('.dialog').text("Testing").hide();
          } else if (this.inventory.show) {
            $('.inventory').hide();
            this.inventory.show = false;
          } else if ($('.invOption.active').length === 1) {
            $('.option.active').removeClass('active');
            this.inventory.show = true;
            $('.inventory').html("INVENTORY<br><br>" + this.inventory.contents).show();
          } else if ($('.save.active').length === 1) {
            $('.saveBtn').trigger('click');
          }
          if (!this.responding.show && !this.inventory.show && $('.active').length === 0) {
            this.pause = false;
          }
        }
        else if (key === 32) {
          // Space
          if (this.typing.phrase.length > 1) {
            this.typing.phrase += ' ';
            $('.typing').text(this.typing.phrase).show();
          }
        }
    }
  }

  Game.prototype.handleKeyUp = function(key) {
    switch (this.state) {
      case 'init':
        // Do nothing.
        break;
      default:
        var action = this.characters[0].action;
        switch (key) {
          case 8:
            // Backspace
            if (this.typing.phrase.length > 1) {
              this.typing.phrase = this.typing.phrase.substring(0, this.typing.phrase.length - 1);
              $('.typing').text(this.typing.phrase).show();
            } else {
              this.typing.phrase = '';
              $('.typing').hide();
            }
            break;
          case 27:
            // Escape
            if ( $('.option.active').length === 0 ) {
              $('.fileOption').addClass('active');
              $('.save').addClass('active');
              this.pause = true;
            } else {
              $('.option.active').removeClass('active');
              $('.save').removeClass('active');
              this.pause = false;
            }
            break;
          case 37:
            if (this.pause && $('.fileOption.active').length === 0) {
              $('.option.active').toggleClass('active').prev('.option').toggleClass('active');
            }
            action = (action === 'walk-left') ? 'stop' : 'walk-left';
            break;
          case 38:
            if (this.pause && $('.fileOption.active').length === 1 && $('.save.active').length === 0) {
              $('.fileOptions li.active').toggleClass('active').prev('li').toggleClass('active');
            }
            action = (action === 'walk-up') ? 'stop' : 'walk-up';
            break;
          case 39:
            if (this.pause && $('.timeOption.active').length === 0) {
              $('.option.active').toggleClass('active').next('.option').toggleClass('active');
            }
            action = (action === 'walk-right') ? 'stop' : 'walk-right';
            break;
          case 40:
            if (this.pause && $('.fileOption.active').length === 1 && $('.restore.active').length === 0) {
              $('.fileOptions li.active').toggleClass('active').next('li').toggleClass('active');
            }
            action = (action === 'walk-down') ? 'stop' : 'walk-down';
            break;
          case 191:
            // Forward slash
            if (!this.typing.show && !this.responding.show  && $('.active').length === 0) {
              this.pause = true;
              this.inventory.show = true;
              $('.inventory').html("INVENTORY<br><br>" + this.inventory.contents).show();
              break;
            }
        }
        if (this.pause) {
          action = 'stop';
        }
        this.characters[0].action = action;
    }
  }

  Game.prototype.updateGame = function() {
    var currentScore = $('.score').text();
    if (this.score !== currentScore) {
      $('.score').text(this.score);
    }
    this.time += this.gameSpeed/1000;
    this.roundedTime = Math.round(this.time);
    var numSeconds = this.roundedTime % 60;
    var numMinutes = Math.floor(this.roundedTime / 60);
    var numHours = Math.floor(this.roundedTime / 3600);
    $('.timeOption').text(numHours + ":" + numMinutes + ":" + numSeconds);
    if (this.state !== 'init') {
      this.bounds = this.elem.getBoundingClientRect();
    }
    var allCharacters = this.characters;
    for (var index = 0; index < allCharacters.length; index++) {
      var character = allCharacters[index];
      character.updateCharacter();
      character.scene = this.state;
      this.checkCollisions();
    }

    $('.saveScene').val(this.state);
    $('.saveInventory').val(this.inventory.contents);
    $('.saveScore').val(this.score);
    $('.saveTime').val(this.roundedTime);
  }

  Game.prototype.checkCollisions = function() {
    this.checkBorders();
    this.checkObstacles();
  }

  Game.prototype.checkBorders = function() {
    var character = this.characters[0];
    var gameBounds = this.bounds;
    var charBounds = character.bounds;
    var action = character.action;

    if (action === 'walk-left' && charBounds.left < gameBounds.left) {
      character.x = 700;
      this.scenePos.x = this.scenePos.x + this.sceneShift.x;
    } else if (action === 'walk-right' && charBounds.right > gameBounds.right) {
      character.x = 0;
      this.scenePos.x = this.scenePos.x - this.sceneShift.x;
    } else if (action === 'walk-up' && charBounds.top < gameBounds.top) {
      character.y = 500;
      this.scenePos.y = this.scenePos.y + this.sceneShift.y;
    } else if (action === 'walk-down' && charBounds.bottom > gameBounds.bottom) {
      character.y = 0;
      this.scenePos.y = this.scenePos.y - this.sceneShift.y;
    }
    if (this.scenePos.x > this.initialPos.x) {
      this.scenePos.x = this.edges.right;
    } else if (this.scenePos.x < this.edges.right) {
      this.scenePos.x = this.initialPos.x;
    } else if (this.scenePos.y > this.edges.top) {
      this.scenePos.y = this.initialPos.y;
    } else if (this.scenePos.y < this.initialPos.y) {
      this.scenePos.y = this.edges.top;
    }
    $(this.elem).css({
      'background-position': this.scenePos.x + 'px ' + this.scenePos.y + 'px'
    });
    this.checkState();
  }

  Game.prototype.checkObstacles = function() {
    // Nothing here yet.
  }

  Game.prototype.addCharacter = function(name, avatar) {
    /* Create main character */
    var newCharacter = new Character(name, avatar, 350, 300);
    newCharacter.create(this);
    this.characters.push(newCharacter);
  }

  /* Character Constructor and Methods */
  function Character(name, avatar, x, y) {
    this.elem = null;
    this.bounds = null;
    this.name = name;
    this.image = avatar;
    this.x = x;
    this.y = y;
    this.backX = 0;
    this.backY = 0;
    this.speed = 20;
    this.action = 'stand';
    this.scene = 'init';
  }

  Character.prototype.create = function() {
    $('<div>').attr({
      'class': 'character',
      'name': this.name
    }).css({
      'position': 'absolute',
      'left': this.x,
      'top': this.y,
      'height': '120px',
      'width': '60px',
      'background-image': 'url(' + this.image + ')',
      'background-size': '400% 400%',
    }).appendTo($('.game-container'));
    var htmlElem = $('.character').last()[0];
    this.elem = htmlElem;
  }

  Character.prototype.updateCharacter = function() {
    var action = this.action;
    switch (action) {
      case 'stand':
        this.move.stop(this);
        break;
      case 'walk-left':
        this.move.left(this);
        break;
      case 'walk-right':
        this.move.right(this);
        break;
      case 'walk-up':
        this.move.up(this);
        break;
      case 'walk-down':
        this.move.down(this);
        break;
    }
    this.draw(action);
    this.bounds = this.elem.getBoundingClientRect();
  }

  Character.prototype.move = {
    stop: function(self) {
      // Do nothing for now
    },
    left: function(self) {
      self.x -= self.speed;
    },
    right: function(self) {
      self.x += self.speed;
    },
    up: function(self) {
      self.y -= self.speed;
    },
    down: function(self) {
      self.y += self.speed;
    }
  }

  Character.prototype.canMoveUp = function(scene) {
    var canMove = true;
    if (scene === 'oldMan') {
      canMove = false;
    }
    return canMove;
  }

  Character.prototype.draw = function(action) {
    var $self = $(this.elem);
    $self.css({
      'left': this.x,
      'top': this.y
    });
    switch (action) {
      case 'walk-left':
        this.backX += 60;
        this.backY = 360;
        break;
      case 'walk-right':
        this.backX += 60;
        this.backY = 240;
        break;
      case 'walk-up':
        this.backX += 60;
        this.backY = 120;
        break;
      case 'walk-down':
        this.backX += 60;
        this.backY = 0;
        break;
    }
    $self.css({
      'background-position': this.backX + 'px ' + this.backY + 'px'
    });
  }

  /* Create new game */
  var game;
  game = new Game();
  game.init();


  return {
    game: game
  }

})();
